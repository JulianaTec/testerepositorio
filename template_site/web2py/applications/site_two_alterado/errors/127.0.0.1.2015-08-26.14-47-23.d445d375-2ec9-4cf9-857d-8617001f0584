(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'jo\\xc3\\xa3o'"
p3
sS'layer'
p4
S'C:\\Users\\TecSUS-3\\Desktop\\template_site\\web2py\\applications\\site_two_alterado\\controllers/veiculo.py'
p5
sS'code'
p6
S'__author__ = \'TecSUS-3\'\n\n####################################### IMPORTS #######################################\nfrom gluon import A, INPUT, IS_NOT_EMPTY, SQLFORM, URL, TR, TABLE, FORM, IS_LIST_OF, IS_IN_DB, redirect\nfrom gluon import Field\nfrom gluon.tools import Crud\n\n####################################### GLOBALS #######################################\nglobal request, session, response\ncrud = Crud(db2)\n\n\'\'\'\n# ## critical --- make a copy of the environment\n\nglobal_env = copy.copy(globals())\nglobal_env[\'datetime\'] = datetime\n\nhttp_host = request.env.http_host.split(\':\')[0]\nremote_addr = request.env.remote_addr\ntry:\n    hosts = (http_host, socket.gethostname(),\n             socket.gethostbyname(http_host),\n             \'::1\',\'127.0.0.1\',\'::ffff:127.0.0.1\')\nexcept:\n    hosts = (http_host, )\n\nif request.env.http_x_forwarded_for or request.env.wsgi_url_scheme\\\n     in [\'https\', \'HTTPS\']:\n    session.secure()\nelif (remote_addr not in hosts) and (remote_addr != "127.0.0.1"):\n    raise HTTP(200, T(\'appadmin is disabled because insecure channel\'))\nif not gluon.fileutils.check_credentials(request):\n    redirect(URL(a=\'admin\', c=\'default\', f=\'index\'))\n\nignore_rw = True\nresponse.view = \'appadmin.html\'\nresponse.menu = [[T(\'design\'), False, URL(\'admin\', \'default\', \'design\',\n                 args=[request.application])], [T(\'db\'), False,\n                 URL(r=request, f=\'index\')], [T(\'state\'), False,\n                 URL(r=request, f=\'state\')], [T(\'cache\'), False,\n                 URL(r=request, f=\'ccache\')]]\n\n\'\'\'\n\n###teste de classe########################################\nclass MyClass(object):\n        z = 2\n        def __init__(self, a, b):\n            self.x = a\n            self.y = b\n        def add(self):\n            return self.x + self.y + self.z\n\n\nclass MyList(object):\n        def __init__(self, *a): self.a = list(a)\n        def __len__(self): return len(self.a)\n        def __getitem__(self, i): return self.a[i]\n        def __setitem__(self, i, j): self.a[i] = j\n\nTiposCarros = [\'Novo\',\'Usado\']\n\ndef meu_user():\n\n    from gluon.tools import Recaptcha\n\n    title = \'Login\'\n\n    PUBLIC_KEY = \'xxx\'\n    PRIVATE_KEY = \'xxx\'\n    form = auth2()\n   # form.element(\'auth2\').insert(-1,(T(\'Please confirm that you are not a machine :\'),Recaptcha(request, PUBLIC_KEY, PRIVATE_KEY),\'\'))\n\n    order = db2.carro.marca\n    #selecionar apenas os que possuem fotos\n    registros = db2(db2.carro.foto!=None).select(orderby=order)\n\n    form_teste = FORM(registros)\n\n    form_carro = detalhes_geral(db2.carro, 2)\n\n    (form_crud,table_crud) = pesquisa_geral(db2.carro)\n\n    #meu_grupo(\'grupo_teste\', \'teste de grupo\')\n    #meu_membros(\'2\',\'4\')\n    permissao_id = db2.permissoes.insert(nome = \'Leitura\')\n    minha_permissao(\'2\',\'read\',permissao_id)\n    print auth2.has_permission(\'read\',permissao_id,1,\'jo\xc3\xa3o\')\n\n    return locals()\n\ndef minha_permissao(id_grupo,descricao,leitura):\n\n    auth2.add_permission(id_grupo,descricao,leitura)\n\n    return locals()\n\ndef meu_grupo(nome_grupo,descricao):\n\n    auth2.add_group(nome_grupo,descricao)\n\n    return locals()\n\ndef meu_membros(grupo_id,user_id):\n\n    auth2.add_membership(grupo_id,user_id)\n\n    return locals()\n\n\ndef fecha_venda(formulario):\n\n    file = open(\'venda\'+str(formulario.id)+\'.txt\', \'w\')\n    file.write(\'venda realizada!\')\n    modelo = db2.carro[formulario.modelo].modelo\n    nome = db2.vendedor[formulario.nome_vendedor].nome\n    print modelo+\'  este aqui\'\n    file.write(str(formulario.id)+\' - \'+modelo+\' - \'+nome+\' - \'+str(formulario.desconto)+\' - \'+str(formulario.forma_pagamento)+\' - \'+str(formulario.data))\n   #file.close()\n    #file = open(\'a\', \'r\')\n    #print file.read()\n    #file.close()\n\n    return locals();\n\ndef Inicio():\n\n    session.flashed = False\n\n    #####classes#################\n    myinstance = MyClass(3, 4)\n    print myinstance.add()\n\n    b = MyList(3, 4, 5)\n    print b[1]\n    b.a[1] = 7\n    print b.a\n    ##############################\n\n    if not session.flashed:\n        response.flash = T(\'Bem vindo a loja de carros!\')\n\n    #response.write(\'Venha conhecer nossos carros!!!\')\n    ###############################\n    agora = request.now\n\n    #lista todos os carros na tela\n    #car_smartgrid  = SQLFORM.smartgrid(db2.carro)\n\n    #lista todos os carros na tela\n    car_grid = SQLFORM.grid(db2.carro)\n\n    #contador de sess\xc3\xa3o\n    session.counter = (session.counter or 0) + 1\n    counter = session.counter\n\n    #mostrar o nome do usu\xc3\xa1rio na tela\n    if auth2.user:\n       visitor_name = auth2.user.first_name\n    else:\n       visitor_name = \'nenhum\'\n\n    table_hora = []\n    table_hora.append(TR(\'Hora Atual:\',agora))\n    table_hora.append(TR(\'Visitante:\',visitor_name))\n    table_hora.append(TR(\'N\xc3\xbamero de visitas:\',counter))\n    table = TABLE(table_hora)\n    form_hora = FORM(table)\n\n    order = db2.carro.marca\n    #selecionar apenas os que possuem fotos\n    registros = db2(db2.carro.foto!=None).select(orderby=order)\n\n    form_teste = FORM(registros)\n\n    form_carro = detalhes_geral(db2.carro, 2)\n\n    (form_crud,table_crud) = pesquisa_geral(db2.carro)\n\n    title = "Loja de Carros"\n\n#    showcase = SHOWCASE(registros)\n\n    return locals()\n\ndef consultar_compradores(carro_id):\n    carro_muda = db2(db2.carro.id == carro_id).select()\n    form_consulta = SQLFORM(carro_muda)\n    return locals()\n\n@auth2.requires_login()\ndef venda():\n\n     if not session.flashed:\n        response.flash = T(\'Bem vindo a tela de vendas!\')\n\n     title = "Venda"\n\n     ####SQL####################################################\n     #######################################################\n     #aqui ele formata tudo sozinho e ainda envia para o banco sozinho tamb\xc3\xa9m\n     #mas n\xc3\xa3o mostra a mensagem de falha ou aceita\xc3\xa7\xc3\xa3o sozinho\n     venda_sqlform = SQLFORM(db2.venda)\n\n     if venda_sqlform.accepts(request,session):\n        response.flash = \'Form accepted\'\n        formulario = db2().select(db2.venda.ALL).last()\n        fecha_venda(formulario)\n     elif venda_sqlform.errors:\n        response.flash = \'Form has errors\'\n     else:\n        response.flash = \'Please fill the form\'\n\n     form_venda = detalhes_geral(db2.venda, 2)\n\n     (form_crud,table_crud) = pesquisa_geral(db2.venda)\n\n     return locals()\n\ndef download():\n    import os\n    #db2 = get_database(request)\n    return response.download(request, db2)\n\n#@auth2.requires_login()\ndef comprador():\n\n    title = \'Cliente\'\n\n    #lista todos os carros na tela\n    comprador_grid = SQLFORM.smartgrid(db2.comprador)\n\n    #CRUD\n    #aqui ele formata tudo sozinho e ainda envia para o banco sozinho tamb\xc3\xa9m\n    #mostra a mensagem de falha sozinho\n    comprador_crud = crud.create(db2.comprador)\n\n    ####SQL####################################################\n    #######################################################\n    #aqui ele formata tudo sozinho e ainda envia para o banco sozinho tamb\xc3\xa9m\n    #mas n\xc3\xa3o mostra a mensagem de falha ou aceita\xc3\xa7\xc3\xa3o sozinho\n    comprador_sqlform = SQLFORM(db2.comprador)\n\n    if comprador_sqlform.accepts(request,session):\n        response.flash = \'Form accepted\'\n    elif comprador_sqlform.errors:\n        response.flash = \'Form has errors\'\n    else:\n        response.flash = \'Please fill the form\'\n\n    form_geral = detalhes_geral(db2.comprador, 1)\n\n    (form_crud,table_crud) = pesquisa_geral(db2.comprador)\n\n    return locals()\n\n\ndef detalhes_geral(tabela, tb_id):\n\n    registro_geral = tabela(tb_id) or redirect(URL(\'Inicio\'))\n\n    form_geral =SQLFORM(tabela,registro_geral,deletable=True,upload=URL(\'veiculo\',\'download\'))\n\n    if form_geral.accepts(request.vars,session):\n        response.flash = \'Sucesso\'\n    elif form_geral.errors:\n        response.flash = \'Erro\'\n\n    return form_geral\n\ndef pesquisa_geral(tabela):\n\n    form_crud,table_crud = crud.search(tabela)\n\n    return form_crud,table_crud\n\n#@auth2.requires_membership(\'Master\')\ndef marca():\n\n    title = "Cadastro de Marcas"\n\n    #lista todos os carros na tela\n    marca_grid  = SQLFORM.smartgrid(db2.marca)\n\n    #CRUD\n    #aqui ele formata tudo sozinho e ainda envia para o banco sozinho tamb\xc3\xa9m\n    #mostra a mensagem de falha sozinho\n    marca_crud = crud.create(db2.marca)\n\n    ####SQL####################################################\n    #######################################################\n    #aqui ele formata tudo sozinho e ainda envia para o banco sozinho tamb\xc3\xa9m\n    #mas n\xc3\xa3o mostra a mensagem de falha ou aceita\xc3\xa7\xc3\xa3o sozinho\n    marca_sqlform = SQLFORM(db2.marca)\n\n    if marca_sqlform.accepts(request,session):\n        response.flash = \'Form accepted\'\n    elif marca_sqlform.errors:\n        response.flash = \'Form has errors\'\n    else:\n        response.flash = \'Please fill the form\'\n\n    form_marca = detalhes_geral(db2.marca, 2)\n\n    (form_crud,table_crud) = pesquisa_geral(db2.marca)\n\n    return locals()\n\n#@auth2.requires_membership(\'Master\')\ndef carro():\n\n    title = "Cadastro de Carros"\n\n    if not session.flashed:\n        response.flash = T(\'Bem vindo a loja de carros!\')\n\n    #lista todos os carros na tela\n    car_grid = SQLFORM.smartgrid(db2.carro)\n\n    #CRUD\n    #aqui ele formata tudo sozinho e ainda envia para o banco sozinho tamb\xc3\xa9m\n    #mostra a mensagem de falha sozinho\n    carro_crud = crud.create(db2.carro)\n\n    #######################################################\n    #aqui ele formata tudo sozinho e ainda envia para o banco sozinho tamb\xc3\xa9m\n    #mas n\xc3\xa3o mostra a mensagem de falha ou aceita\xc3\xa7\xc3\xa3o sozinho\n    carro_sqlform = SQLFORM(db2.carro)\n\n    if carro_sqlform.accepts(request,session):\n        response.flash = \'Form accepted\'\n    elif carro_sqlform.errors:\n        response.flash = \'Form has errors\'\n    else:\n        response.flash = \'Please fill the form\'\n\n    excluir_carro(1)\n\n    alterar_carro(2)\n\n    #######################################################\n     # Must repeat the field validators declared in the db.py\n    marca_input=INPUT(_name=\'marca_input\', requires=IS_IN_DB(db2, \'marca.id\',\'marca.nome\',error_message=e_m[\'not_in_db\']))\n    modelo_input=INPUT(_name=\'modelo_input\')\n    y1 = request.now.year-20\n    y2 = request.now.year+2\n    ano_input=INPUT(_name=\'ano_input\', requires=IS_INT_IN_RANGE(y1,y2,error_message=e_m[\'not_in_range\']))\n    cor_input=INPUT(_name=\'cor_input\', requires=IS_IN_SET(cores))\n    valor_input=INPUT(_name=\'valor_input\')\n    itens_input=INPUT(_name=\'itens_input\',requires=IS_IN_SET((\'Alarme\',\'Trava\',\'Som\', \'Ar\'),multiple=True,error_message=e_m[\'not_in_set\']))\n    estado_input=INPUT(_name=\'estado_input\',requires=IS_IN_SET(estados,error_message=e_m[\'not_in_set\']))\n    desc_input=INPUT(_name=\'desc_input\')\n    foto_input=INPUT(_name=\'foto_input\',requires=IS_IMAGE(IS_IMAGE(extensions=(\'jpeg\', \'png\', \'.gif\'),error_message=e_m[\'image\'])))\n\n    #neste ponto define a posi\xc3\xa7\xc3\xa3o dos dados dentro de uma tabela\n    # Manual creation of the html table\n    table_rows = []\n    table_rows.append(TR(\'Marca:\', marca_input))\n    table_rows.append(TR(\'Modelo:\', modelo_input))\n    table_rows.append(TR(\'Ano:\', ano_input))\n    table_rows.append(TR(\'Cor:\', cor_input))\n    table_rows.append(TR(\'Valor:\', valor_input))\n    table_rows.append(TR(\'Itens:\', itens_input))\n    table_rows.append(TR(\'Estado:\', estado_input))\n    table_rows.append(TR(\'Descri\xc3\xa7\xc3\xa3o:\', desc_input))\n    table_rows.append(TR(\'Foto:\', foto_input))\n    # Fields starting with _ are passed to the html as attribute elements\n    table_rows.append(TR(TD(INPUT(_type=\'submit\'), _colspan=\'2\', _align=\'center\')))\n    table = TABLE(table_rows)\n\n    form = FORM(table)\n\n    #momento em que realmente o dado \xc3\xa9 colocado dentro do banco de dados\n    # Processing the form submition\n    if form.accepts(request,session):\n        # Retriving the form fields\n        form_marca_input = form.vars.marca\n        form_modelo_input = form.vars.modelo\n        form_ano_input = form.vars.ano\n        form_cor_input = form.vars.cor\n        form_valor_input = form.vars.valor\n        form_itens_input = form.vars.itens\n        form_estado_input = form.vars.estado\n        form_desc_input = form.vars.desc\n        form_foto_input = form.vars.foto\n        # Inserting in the database\n        db.car_model.insert(marca=form_marca_input, modelo = form_modelo_input,ano = form_ano_input, cor = form_cor_input, valor = form_valor_input, itens = form_itens_input, estado = form_estado_input, desc = form_desc_input, foto = form_foto_input)\n        # Tell the user about the insertion\n        response.flash = \'New car: \' + form_modelo_input\n    elif form.errors:\n        response.flash = \'Form has errors\'\n    else:\n        response.flash = \'Please fill the form\'\n\n    #######################################################\n    form_carro = detalhes_geral(db2.carro,2)\n\n    (form_crud,table_crud) = pesquisa_geral(db2.carro)\n\n    return locals()\n\ndef excluir_carro(carro_id):\n    carro_muda = db2(db2.carro.id == carro_id).delete()\n    return locals()\n\n\n#######################################################\n#n\xc3\xa3o funciona\n#######################################################\ndef alterar_carro(carro_id):\n    carro_muda = db2(db2.carro.id == carro_id).select()\n    for i in carro_muda:\n        i.update(modelo = \'outro\')\n\n    return locals()\n\n#@auth2.requires_membership(\'Master\')\ndef vendedor():\n\n    title = "Cadastro de Vendedores"\n\n    #lista todos os carros na tela\n    vendedor_grid  = SQLFORM.smartgrid(db2.vendedor)\n\n    #CRUD\n    #aqui ele formata tudo sozinho e ainda envia para o banco sozinho tamb\xc3\xa9m\n    #mostra a mensagem de falha sozinho\n    vendedor_crud = crud.create(db2.vendedor)\n\n    ####SQL####################################################\n    #######################################################\n    #aqui ele formata tudo sozinho e ainda envia para o banco sozinho tamb\xc3\xa9m\n    #mas n\xc3\xa3o mostra a mensagem de falha ou aceita\xc3\xa7\xc3\xa3o sozinho\n    vendedor_sqlform = SQLFORM(db2.vendedor)\n\n    if vendedor_sqlform.accepts(request,session):\n        response.flash = \'Form accepted\'\n    elif vendedor_sqlform.errors:\n        response.flash = \'Form has errors\'\n    else:\n        response.flash = \'Please fill the form\'\n\n    form_vendedor = detalhes_geral(db2.vendedor, 1)\n\n    (form_crud,table_crud) = pesquisa_geral(db2.vendedor)\n\n    return locals()\n\n\n#@auth2.requires_login()\ndef admin():\n\n    args = request.args\n\n    title = \'administration\'\n\n    if not args:\n        link = UL(*[LI(A(tab,_href=URL(args=tab))) for tab in db.tables])\n        return dict(items=link,title=title)\n\n    if not args(1):\n        i = 0\n    else:\n        i =1\n\n    for tab in db.tables:\n        if tab==args(i):\n            tb = db[tab]\n\n    crud = Crud(db)\n\n    if args(0)==\'edit\':\n        form = crud.update(tb, args(2),next=URL(f=\'admin\',args=args(1)))\n        items = None\n        title = \'Edit %s \' % args(i)\n    else:\n        form = crud.create(tb)\n        rows = db().select(tb.ALL)\n        items = SQLTABLE(rows,linkto=\'edit\')\n        title = \'Insert %s \' % args(i)\n\n\n    return dict(form=form,items=items,title=title)\n\ndef send_email():\n\n    title = \'Contato\'\n\n    form = SQLFORM.factory(\n        Field(\'name\', requires=IS_NOT_EMPTY()),\n        Field(\'email\', requires =[ IS_EMAIL(error_message=\'invalid email!\'), IS_NOT_EMPTY() ]),\n        Field(\'subject\', requires=IS_NOT_EMPTY()),\n        Field(\'message\', requires=IS_NOT_EMPTY(), type=\'text\')\n    )\n    if form.process().accepted:\n        session.name = form.vars.name\n        session.email = form.vars.email\n        session.subject = form.vars.subject\n        session.message = form.vars.message\n\n        x = mails.send(to=[\'juliana.padilha@gmail.com\'],\n            subject=\'loja de carros\',\n            message= "Ol\xc3\xa1 esse \xc3\xa9 um email de teste da lja de carros.\\nName:"+ session.name+" \\nEmail : " + session.email +"\\nSubject : "+session.subject +"\\nMessage : "+session.message+ ".\\n "\n        )\n\n        if x == True:\n            response.flash = \'email sent sucessfully.\'\n        else:\n            response.flash = \'fail to send email sorry!\'\n\n        #response.flash = \'form accepted.\'\n    elif form.errors:\n        response.flash=\'form has errors.\'\n\n    form_carro = detalhes_geral(db2.carro, 2)\n\n    (form_crud,table_crud) = pesquisa_geral(db2.carro)\n\n    return locals()\nresponse._vars=response._caller(meu_user)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\TecSUS-3\\Desktop\\template_site\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\TecSUS-3\\Desktop\\template_site\\web2py\\applications\\site_two_alterado\\controllers/veiculo.py", line 520, in <module>\n  File "C:\\Users\\TecSUS-3\\Desktop\\template_site\\web2py\\gluon\\globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\TecSUS-3\\Desktop\\template_site\\web2py\\applications\\site_two_alterado\\controllers/veiculo.py", line 88, in meu_user\n    print auth2.has_permission(\'read\',permissao_id,1,\'jo\xc3\xa3o\')\n  File "C:\\Users\\TecSUS-3\\Desktop\\template_site\\web2py\\gluon\\tools.py", line 3624, in has_permission\n    == user_id).select(membership.group_id)\n  File "C:\\Users\\TecSUS-3\\Desktop\\template_site\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2026, in select\n    return adapter.select(self.query,fields,attributes)\n  File "C:\\Users\\TecSUS-3\\Desktop\\template_site\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 125, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "C:\\Users\\TecSUS-3\\Desktop\\template_site\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1226, in select\n    sql = self._select(query, fields, attributes)\n  File "C:\\Users\\TecSUS-3\\Desktop\\template_site\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1124, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "C:\\Users\\TecSUS-3\\Desktop\\template_site\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 909, in expand\n    out = op(first, second, **optional_args)\n  File "C:\\Users\\TecSUS-3\\Desktop\\template_site\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 806, in EQ\n    self.expand(second, first.type))\n  File "C:\\Users\\TecSUS-3\\Desktop\\template_site\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 920, in expand\n    return str(self.represent(expression,field_type))\n  File "C:\\Users\\TecSUS-3\\Desktop\\template_site\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1371, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'jo\\xc3\\xa3o\'\n'
p11
s.