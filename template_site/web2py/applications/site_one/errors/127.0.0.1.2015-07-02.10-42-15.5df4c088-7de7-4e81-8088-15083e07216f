(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> id() takes exactly one argument (0 given)"
p3
sS'layer'
p4
S'C:\\Documents and Settings\\Administrador\\Desktop\\template_site\\web2py\\applications\\site_one\\models\\db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\n## app configuration made easy. Look inside private/appconfig.ini\nfrom gluon.contrib.appconfig import AppConfig\n## once in production, remove reload=True to gain full speed\nmyconf = AppConfig(reload=True)\n\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    db = DAL(myconf.take(\'db.uri\'), pool_size=myconf.take(\'db.pool_size\', cast=int), check_reserved=[\'all\'])\nelse:\n    ## connect to Google BigTable (optional \'google:datastore://namespace\')\n    db = DAL(\'google:datastore+ndb\')\n    ## store sessions and tickets there\n    session.connect(request, response, db=db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be \'controller/function.extension\'\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n## choose a style for forms\nresponse.formstyle = myconf.take(\'forms.formstyle\')  # or \'bootstrap3_stacked\' or \'bootstrap2\' or other\nresponse.form_label_separator = myconf.take(\'forms.separator\')\n\n\n## (optional) optimize handling of static files\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n## (optional) static assets folder versioning\n# response.static_version = \'0.0.0\'\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Service, PluginManager\n\nauth = Auth(db)\nservice = Service()\nplugins = PluginManager()\n\n## create all tables needed by auth if not custom tables\nauth.define_tables(username=False, signature=False)\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = \'logging\' if request.is_local else myconf.take(\'smtp.server\')\nmail.settings.sender = myconf.take(\'smtp.sender\')\nmail.settings.login = myconf.take(\'smtp.login\')\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n## after defining tables, uncomment below to enable auditing\n# auth.enable_record_versioning(db)\ndb = DAL("sqlite://storage.sqlite")\n\ndb.define_table(\'image\',\n   Field(\'title\', unique=True),\n   Field(\'file\', \'upload\'),\n   format = \'%(title)s\')\n\ndb.define_table(\'post\',\n   Field(\'image_id\', \'reference image\'),\n   Field(\'author\'),\n   Field(\'email\'),\n   Field(\'body\', \'text\'))\n\ndb.image.title.requires = IS_NOT_IN_DB(db, db.image.title)\ndb.post.image_id.requires = IS_IN_DB(db, db.image.id, \'%(title)s\')\ndb.post.author.requires = IS_NOT_EMPTY()\ndb.post.email.requires = IS_EMAIL()\ndb.post.body.requires = IS_NOT_EMPTY()\n\ndb.post.image_id.writable = db.post.image_id.readable = False\n\nfrom gluon.tools import Auth\nauth = Auth(db)\nauth.define_tables(username=True)\n\nfrom gluon.tools import *\nauth = Auth(db)\nauth.define_tables()\ncrud = Crud(db)\n\ndb.define_table(\'page\',\n    Field(\'title\'),\n    Field(\'body\', \'text\'),\n    Field(\'created_on\', \'datetime\', default=request.now),\n    Field(\'created_by\', \'reference auth_user\', default=auth.user_id),\n    format=\'%(title)s\')\n\ndb.define_table(\'post2\',\n    Field(\'page_id\', \'reference page\'),\n    Field(\'body\', \'text\'),\n    Field(\'created_on\', \'datetime\', default=request.now),\n    Field(\'created_by\', \'reference auth_user\', default=auth.user_id))\n\ndb.define_table(\'document\',\n    Field(\'page_id\', \'reference page\'),\n    Field(\'name\'),\n    Field(\'file\', \'upload\'),\n    Field(\'created_on\', \'datetime\', default=request.now),\n    Field(\'created_by\', \'reference auth_user\', default=auth.user_id),\n    format=\'%(name)s\')\n\ndb.page.title.requires = IS_NOT_IN_DB(db, \'page.title\')\ndb.page.body.requires = IS_NOT_EMPTY()\ndb.page.created_by.readable = db.page.created_by.writable = False\ndb.page.created_on.readable = db.page.created_on.writable = False\n\ndb.post2.body.requires = IS_NOT_EMPTY()\ndb.post2.page_id.readable = db.post2.page_id.writable = False\ndb.post2.created_by.readable = db.post2.created_by.writable = False\ndb.post2.created_on.readable = db.post2.created_on.writable = False\n\ndb.document.name.requires = IS_NOT_IN_DB(db, \'document.name\')\ndb.document.page_id.readable = db.document.page_id.writable = False\ndb.document.created_by.readable = db.document.created_by.writable = False\ndb.document.created_on.readable = db.document.created_on.writable = False\n\ndb.define_table(\'mytable\', Field(\'myfield\'))\nrows = db(db.mytable.myfield!=None).select()\n\nfor row in rows:\n    print row.myfield\n\nmyquery = (db.mytable.myfield != None) | (db.mytable.myfield > \'A\')\n\nmyset = db(myquery)\nrows = myset.select()\nmyset.update(myfield=\'somevalue\')\nmyset.delete()\n\nmyorder = db.mytable.myfield.upper() | db.mytable.id\ndb().select(db.mytable.ALL, orderby=myorder)\n\ndb.mytable.myfield.extra = {}\n\ndb.mytable._extra = {}\n\ndb.define_table(\'person\',Field(\'name\',default=\'\'),format=\'%(name)s\')\ndb.person._format = \'%(name)s/%(id)s\'\ndb.person.name.default = \'anonymous\'\n\ndb.person.insert(name="Alex")\ndb.person.insert(name="Bob")\ndb.person.truncate()\ndb.person.insert(name="Alex")\ndb.person.bulk_insert([{\'name\':\'Alex\'}, {\'name\':\'John\'}, {\'name\':\'Tim\'}])\n\ndb.person.insert(name="Bob")\ndb.rollback()\n\ndb.executesql(\'SELECT * FROM person;\')\n\n\ndb.define_table(\'myfile\', Field(\'image\', \'upload\', default=\'C:\\Documents and Settings\\Administrador\\Desktop\\template_site\\web2py\\applications\\site_one\\uploads\'))\n\n\ndb.person.insert(name="Alex")\ndb.person.insert(name="Bob")\ndb.person.insert(name="Carl")\n\n\nperson = db.person\n\nname = person.name\n\nq = name==\'Alex\'\ns = db(q)\n\nrows = s.select()\nfor row in rows:\n    print row.id, row.name\n\nfor row in db(db.person.name==\'Alex\').select():\n    print row.name\n\nfor row in db().select(db.person.id, db.person.name):\n    print row.name\n\nfor row in db().select(db.person.ALL):\n    print row.name\n\nfor row in db(db.person.id > 0).select():\n    print row.name\n\n\nrow.name\nrow[\'name\']\nrow(\'person.name\')\n\nmyrecord = db(db.mytable.id==id).select().first()\n\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Documents and Settings\\Administrador\\Desktop\\template_site\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Documents and Settings\\Administrador\\Desktop\\template_site\\web2py\\applications\\site_one\\models\\db.py", line 231, in <module>\n    myrecord = db(db.mytable.id==id).select().first()\n  File "C:\\Documents and Settings\\Administrador\\Desktop\\template_site\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2026, in select\n    return adapter.select(self.query,fields,attributes)\n  File "C:\\Documents and Settings\\Administrador\\Desktop\\template_site\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 125, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "C:\\Documents and Settings\\Administrador\\Desktop\\template_site\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1226, in select\n    sql = self._select(query, fields, attributes)\n  File "C:\\Documents and Settings\\Administrador\\Desktop\\template_site\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1124, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "C:\\Documents and Settings\\Administrador\\Desktop\\template_site\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 909, in expand\n    out = op(first, second, **optional_args)\n  File "C:\\Documents and Settings\\Administrador\\Desktop\\template_site\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 806, in EQ\n    self.expand(second, first.type))\n  File "C:\\Documents and Settings\\Administrador\\Desktop\\template_site\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 920, in expand\n    return str(self.represent(expression,field_type))\n  File "C:\\Documents and Settings\\Administrador\\Desktop\\template_site\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1331, in represent\n    obj = obj()\nTypeError: id() takes exactly one argument (0 given)\n'
p11
s.