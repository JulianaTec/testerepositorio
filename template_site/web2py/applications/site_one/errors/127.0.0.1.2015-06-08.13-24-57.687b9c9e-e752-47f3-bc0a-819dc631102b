(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> CONTAINS() takes at least 3 arguments (3 given)"
p3
sS'layer'
p4
S'C:\\Documents and Settings\\Administrador\\Desktop\\template_site\\web2py\\applications\\site_one\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n\n    # contador para identificar quantas vezes entrou na session\n    if not session.counter:\n        session.counter = 1\n    else:\n        session.counter += 1\n\n    # tag que aparece no come\xc3\xa7o da p\xc3\xa1gina\n    response.flash = T("Bem vindo ao Site One")\n\n    # banco de dados da imagem\n    #images = db().select(db.image.ALL, orderby=db.image.title)\n\n    #return dict(images=images, message=T(\'Pagina 1\'), counter=session.counter)\n    return dict(message=T(\'Pagina 1\'), counter=session.counter)\n\n# requisi\xc3\xa7\xc3\xa3o com senha de adm\n@auth.requires_membership(\'adm\')\ndef manage():\n    grid = SQLFORM.smartgrid(db.image,linked_tables=[\'post\'])\n    return dict(grid=grid)\n\n# requisi\xc3\xa7\xc3\xa3o de login\n@auth.requires_login()\ndef show():\n    image = db.image(request.args(0,cast=int)) or redirect(URL(\'index\'))\n    db.post.image_id.default = image.id\n    form = SQLFORM(db.post)\n    if form.process().accepted:\n        response.flash = \'your comment is posted\'\n    comments = db(db.post.image_id==image.id).select()\n    return dict(image=image, comments=comments, form=form)\n\n# pagina um\ndef first():\n\n    # contador para identificar quantas vezes entrou na session\n    if not session.counter2:\n        session.counter2 = 1\n    else:\n        session.counter2 += 1\n\n    # tag que aparece no come\xc3\xa7o da p\xc3\xa1gina\n    response.flash = T("pagina 1")\n\n    form = SQLFORM.factory(Field(\'visitor_name\',\n                                 label=\'Qual seu nome?\',\n                                 requires=IS_NOT_EMPTY()))\n\n    if form.process().accepted:\n        session.visitor_name = form.vars.visitor_name\n        redirect(URL(\'second\'))\n\n    return dict(message=T(\'Pagina 1\'), counter2=session.counter2, form=form)\n\ndef second():\n      # contador para identificar quantas vezes entrou na session\n    if not session.counter3:\n        session.counter3 = 1\n    else:\n        session.counter3 += 1\n\n    if not request.function == \'first\' and not session.visitor_name:\n        redirect(URL(\'first\'))\n\n  # banco de dados da imagem\n    images = db().select(db.image.ALL, orderby=db.image.title)\n\n    return dict(images=images, session3=session.counter3)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\ndef wiki():\n     """ this controller returns a dictionary rendered by the view\n         it lists all wiki pages\n     >>> wiki().has_key(\'wiki\')\n     True\n     """\n     pages = db().select(db.page.id,db.page.title,orderby=db.page.title)\n     return dict(pages=pages)\n\ndef show_wiki():\n     """shows a wiki page"""\n     this_page = db.page(request.args(0,cast=int)) or redirect(URL(\'wiki\'))\n     db.post2.page_id.default = this_page.id\n     form = SQLFORM(db.post2).process() if auth.user else None\n     pagecomments = db(db.post2.page_id==this_page.id).select()\n     return dict(page=this_page, comments=pagecomments, form=form)\n\n@auth.requires_login()\ndef edit():\n     """edit an existing wiki page"""\n     this_page = db.page(request.args(0,cast=int)) or redirect(URL(\'wiki\'))\n     form = SQLFORM(db.page, this_page).process(\n         next = URL(\'show_wiki\',args=request.args))\n     return dict(form=form)\n\ndef search():\n     """an ajax wiki search page"""\n     return dict(form=FORM(INPUT(_id=\'keyword\',_name=\'keyword\',\n              _onkeyup="ajax(\'callback\', [\'keyword\'], \'target\');")),\n              target_div=DIV(_id=\'target\'))\n\ndef callback():\n     """an ajax callback that returns a <ul> of links to wiki pages"""\n     query = db.page.title.contains(request.vars.keyword)\n     pages = db(query).select(orderby=db.page.title)\n     links = [A(p.title, _href=URL(\'show_wiki)\',args=p.id)) for p in pages]\n     return UL(*links)\n\n@auth.requires_login()\ndef create():\n     """creates a new empty wiki page"""\n     form = SQLFORM(db.page).process(next=URL(\'wiki\'))\n     return dict(form=form)\n\n@auth.requires_login()\ndef documents():\n     """browser, edit all documents attached to a certain page"""\n     page = db.page(request.args(0,cast=int)) or redirect(URL(\'wiki\'))\n     db.document.page_id.default = page.id\n     db.document.page_id.writable = False\n     grid = SQLFORM.grid(db.document.page_id==page.id,args=[page.id])\n     return dict(page=page, grid=grid)\nresponse._vars=response._caller(callback)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Documents and Settings\\Administrador\\Desktop\\template_site\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Documents and Settings\\Administrador\\Desktop\\template_site\\web2py\\applications\\site_one\\controllers/default.py", line 169, in <module>\n  File "C:\\Documents and Settings\\Administrador\\Desktop\\template_site\\web2py\\gluon\\globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Documents and Settings\\Administrador\\Desktop\\template_site\\web2py\\applications\\site_one\\controllers/default.py", line 151, in callback\n    pages = db(query).select(orderby=db.page.title)\n  File "C:\\Documents and Settings\\Administrador\\Desktop\\template_site\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2026, in select\n    return adapter.select(self.query,fields,attributes)\n  File "C:\\Documents and Settings\\Administrador\\Desktop\\template_site\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 125, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "C:\\Documents and Settings\\Administrador\\Desktop\\template_site\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1226, in select\n    sql = self._select(query, fields, attributes)\n  File "C:\\Documents and Settings\\Administrador\\Desktop\\template_site\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1124, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "C:\\Documents and Settings\\Administrador\\Desktop\\template_site\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 911, in expand\n    out = op(first,**optional_args)\nTypeError: CONTAINS() takes at least 3 arguments (3 given)\n'
p11
s.